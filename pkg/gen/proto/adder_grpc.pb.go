// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/adder.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	GetEmployeesList(ctx context.Context, in *EmployeesRequest, opts ...grpc.CallOption) (*EmployeesAnswer, error)
	GetEmployeeAbsencesInfo(ctx context.Context, in *EmployeesAbsencesRequest, opts ...grpc.CallOption) (*EmployeesAbsencesAnswer, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) GetEmployeesList(ctx context.Context, in *EmployeesRequest, opts ...grpc.CallOption) (*EmployeesAnswer, error) {
	out := new(EmployeesAnswer)
	err := c.cc.Invoke(ctx, "/grpc.AppService/GetEmployeesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetEmployeeAbsencesInfo(ctx context.Context, in *EmployeesAbsencesRequest, opts ...grpc.CallOption) (*EmployeesAbsencesAnswer, error) {
	out := new(EmployeesAbsencesAnswer)
	err := c.cc.Invoke(ctx, "/grpc.AppService/GetEmployeeAbsencesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	GetEmployeesList(context.Context, *EmployeesRequest) (*EmployeesAnswer, error)
	GetEmployeeAbsencesInfo(context.Context, *EmployeesAbsencesRequest) (*EmployeesAbsencesAnswer, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) GetEmployeesList(context.Context, *EmployeesRequest) (*EmployeesAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeesList not implemented")
}
func (UnimplementedAppServiceServer) GetEmployeeAbsencesInfo(context.Context, *EmployeesAbsencesRequest) (*EmployeesAbsencesAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeAbsencesInfo not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_GetEmployeesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetEmployeesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AppService/GetEmployeesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetEmployeesList(ctx, req.(*EmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetEmployeeAbsencesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeesAbsencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetEmployeeAbsencesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AppService/GetEmployeeAbsencesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetEmployeeAbsencesInfo(ctx, req.(*EmployeesAbsencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployeesList",
			Handler:    _AppService_GetEmployeesList_Handler,
		},
		{
			MethodName: "GetEmployeeAbsencesInfo",
			Handler:    _AppService_GetEmployeeAbsencesInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/adder.proto",
}
